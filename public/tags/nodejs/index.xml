<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Nodejs on </title>
        <link>//localhost:1313/tags/nodejs/</link>
        <description>Recent content in Nodejs on </description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <managingEditor>jonathan.hendler&#43;whatisprogress@gmail.com (Jonathan Hendler)</managingEditor>
        <webMaster>jonathan.hendler&#43;whatisprogress@gmail.com (Jonathan Hendler)</webMaster>
        <lastBuildDate>Fri, 26 Mar 2010 22:32:00 +0000</lastBuildDate><atom:link href="//localhost:1313/tags/nodejs/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Soliciting Advice: highly concurrent, available, non-blocking server</title>
        <link>//localhost:1313/?p=10/</link>
        <pubDate>Fri, 26 Mar 2010 22:32:00 +0000</pubDate>
        <author>jonathan.hendler&#43;whatisprogress@gmail.com (Jonathan Hendler)</author>
        <guid>//localhost:1313/?p=10/</guid>
        <description>&lt;div&gt;
  I&amp;#8217;m seeking feedback on a language or platform for a highly reliable and low latency web service / application.
&lt;/div&gt;
&lt;div&gt;
  &lt;strong&gt;Assumption&lt;/strong&gt;
&lt;/div&gt;
&lt;div&gt;
  Bottlenecks in a web service are usually related to data retrieval and storage, and eventually bandwidth and latency.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
  Highly concurrent, lightweight threads provide options for reliability, load distribution, and perceived performance that would otherwise not be available.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
  &lt;strong&gt;General Requirements&amp;nbsp;&lt;/strong&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;ul class=&#34;MailOutline&#34;&gt;
    &lt;li&gt;
      Easy to use (build, deploy, monitor)
    &lt;/li&gt;
    &lt;li&gt;
      Plentiful external, stable, pre-integrated Libraries
    &lt;/li&gt;
    &lt;li&gt;
      Use case: distributed, non-blocking web services
    &lt;/li&gt;
    &lt;li&gt;
      Quite a bit of message and job queueing&amp;nbsp;
    &lt;/li&gt;
    &lt;li&gt;
      multiple databases , caching
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;strong&gt;Top candidates&lt;/strong&gt;
&lt;/div&gt;
&lt;div&gt;
  Very incomplete list of pros and cons, but some of my thoughts, highlighted.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
  &lt;ul class=&#34;MailOutline&#34;&gt;
    &lt;li&gt;
      &lt;strong&gt;&lt;em&gt;&lt;a href=&#34;http://www.scala-lang.org/&#34;&gt;Scala&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; &lt;ul&gt;
        &lt;li&gt;
          pros &lt;ul&gt;
            &lt;li&gt;
              assume it will take great advantage of Java 1.7 concurrency, multi-core
            &lt;/li&gt;
            &lt;li&gt;
              fairly trivial import of external java libs (except for non-thread safe?) &lt;ul&gt;
                &lt;li&gt;
                  e.g. ZooKeeper &amp;#8211; &lt;a href=&#34;http://hadoop.apache.org/zookeeper/docs/r3.0.0/index.html&#34;&gt;http://hadoop.apache.org/zookeeper/docs/r3.0.0/index.html&lt;/a&gt;
                &lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;li&amp;gt;
      cons &amp;lt;ul&amp;gt;
        &amp;lt;li&amp;gt;
          new language syntax, paradigm learning curve
        &amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;
          doubts about JVM memory efficiency and stability as resources are constrained
        &amp;lt;/li&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;

&amp;lt;li&amp;gt;
  &amp;lt;strong&amp;gt;&amp;lt;em&amp;gt;Server Side Javascript&amp;lt;/em&amp;gt;&amp;lt;/strong&amp;gt; &amp;amp;#8211; via&amp;amp;nbsp;&amp;lt;a href=&amp;quot;http://nodejs.org/&amp;quot;&amp;gt; node.js&amp;lt;/a&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp; &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;
      pros &amp;lt;ul&amp;gt;
        &amp;lt;li&amp;gt;
          redis integration for caching
        &amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;
          fast, lightweight, easy language.&amp;amp;nbsp;
        &amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;
          some custom js would be portable to browsers (coolness)
        &amp;lt;/li&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/li&amp;gt;
    
    &amp;lt;li&amp;gt;
      cons &amp;lt;ul&amp;gt;
        &amp;lt;li&amp;gt;
          very new
        &amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;
          performance
        &amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;
          not as many external libs?
        &amp;lt;/li&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;

&amp;lt;li&amp;gt;
  &amp;lt;a href=&amp;quot;http://www.tornadoweb.org/&amp;quot;&amp;gt;Tornado&amp;lt;/a&amp;gt; &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;
      pros &amp;lt;ul&amp;gt;
        &amp;lt;li&amp;gt;
          Python &amp;lt;ul&amp;gt;
            &amp;lt;li&amp;gt;
              as many libs as Scala
            &amp;lt;/li&amp;gt;
          &amp;lt;/ul&amp;gt;
        &amp;lt;/li&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/li&amp;gt;
    
    &amp;lt;li&amp;gt;
      cons &amp;lt;ul&amp;gt;
        &amp;lt;li&amp;gt;
          narrower use cases
        &amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;
          performance
        &amp;lt;/li&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
  &amp;nbsp;Would love comments, but a more complete list is presented in a survey:
&lt;/div&gt;
&lt;div&gt;
  &lt;div&gt;
    &lt;span class=&#34;Apple-tab-span&#34;&gt; &lt;/span&gt;&lt;a href=&#34;http://www.surveymonkey.com/s/ZGQP6YJ&#34; target=&#34;_blank&#34;&gt;http://www.surveymonkey.com/s/ZGQP6YJ&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        
    </channel>
</rss>
